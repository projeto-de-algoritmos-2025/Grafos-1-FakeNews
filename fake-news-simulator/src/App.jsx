import { useState, useEffect } from 'react';
import ForceGraph2D from 'react-force-graph-2d';
import { myGraphData } from './data';

function App() {
  // useState receives an initial state and returns an array with the current state and a function to update it, which is destructured into two variables
  const [graphData, setGraphData] = useState({ nodes: [], links: [] });
  const [infectedNodes, setInfectedNodes] = useState({});
  const [startNodeId, setStartNodeId] = useState(null);

  // TO DO:
  // 1. Keep the colouring by groups?
  // 2. Ensure that the red color is used exclusively for infected nodes
  // 3. Should all the logic be here in the App.jsx?
  // 4. improve on the probability of misinformation spread
  // 5. show the tree generated by the BFS?
  // 6. Improve the fake news dynamic?

  useEffect(() => {
    setGraphData(myGraphData);
  }, []);

  const spreadFakeNews = (startNodeId) => {
    setStartNodeId(startNodeId);
    const newInfectedNodes = {[startNodeId]:0};
    const queue = [{id: startNodeId, step: 0}];
    const visited = new Set([startNodeId]);

    // runs BFS
    while (queue.length > 0) {
      // dequeue
      const { id, step } = queue.shift();
      // finds neighbors in the layer
      const outgoingLinks = graphData.links.filter(
        link => (link.source.id || link.source) === id
      );
      
      for(const link of outgoingLinks){
        const neighbourId = link.target;
        const probability = link.weight;
        
        // checks the node, marks and enqueue it
        if(!visited.has(neighbourId) && 0.1 < probability) {
          visited.add(neighbourId);
          newInfectedNodes[neighbourId.id] = step + 1;
          queue.push({id: neighbourId.id, step: step + 1});
        }
      }
    }

    setInfectedNodes(newInfectedNodes);
    console.log('NÃ³s infectados:', newInfectedNodes)
  }

  return (
    <div style={{ width: '100vw', height: '100vh', border: '5px solid black' }}>
      <ForceGraph2D
        graphData={graphData}
        nodeLabel="id"
        linkLabel="weight"
        linkDirectionalArrowLength={3.5}
        linkDirectionalArrowRelPos={1}
        nodeAutoColorBy="group"
        onNodeClick={(node) => spreadFakeNews(node.id)}
        // will override the auto coloring by group, but we can deal with that later (TO DO: 1)
        nodeColor={node => infectedNodes.hasOwnProperty(node.id) ? 'red' : 'lightgrey'}
        linkColor={link => {
          const sourceInfected = infectedNodes.hasOwnProperty(link.source.id);
          const targetInfected = infectedNodes.hasOwnProperty(link.target.id);

          if (sourceInfected && targetInfected) {
            return 'orange';
          }
          return 'lightgreen'
        }}
      />
    </div>
  );
}

export default App;